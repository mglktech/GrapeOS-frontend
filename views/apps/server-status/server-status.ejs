<!DOCTYPE html>
<html lang="en">

<%-include("../../partials/head")%>

<body class="text-light bg-black">
    <a class="btn btn-secondary btn-lg border rounded border-dark m-3 position-fixed" role="button"
        href="/bin/folders/FiveMServers" style="z-index: 10;"><i class="fa fa-arrow-left"></i></a>

    <div style="background: url(<%=svInfo.Data.vars.banner_detail%>) center / cover no-repeat;width:100%;height: 5em;">
    </div>
    <div class="d-flex justify-content-end">
    </div>
    <div class="d-flex flex-row justify-content-start align-items-center p-2"><img class="rounded-3"
            src="http://servers-live.fivem.net/servers/icon/<%=svInfo.EndPoint%>/<%=svInfo.Data.iconVersion%>.png">
        <div class="d-flex flex-column">
            <h2 class="text-light m-0 p-2"><%=svInfo.Data.vars.sv_projectName%></h2>
            <div class="d-flex flex-row justify-content-between">
                <div class="d-flex flex-row justify-content-start align-items-center mx-1">
                    <div id="statusCircle" class="role-circle-fill"></div>
                    <span class="ml-1" id="playerCount">...</span>
                </div>
                <a class="btn btn-info btn-sm m-2" role="button" href="fivem://connect/<%=svInfo.EndPoint%>"
                    target="_blank">ConnectÂ <i class="fa fa-arrow-right"></i></a>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-center">
        <form id="search" class="flex-fill px-3 py-1"><input id="inputSearch" type="text"
                class="border rounded-pill form-control" placeholder="Search" /></form>
    </div>
    <div class="row p-3">
        <% if(!svInfo.Flags.tracked) {%>
        <div class="d-flex flex-column align-items-center p-3" style="opacity: 0.60;"><i
                class="fa fa-warning text-danger" style="font-size: 4rem;"></i>
            <h6 class="text-danger">Tracking Disabled for this server</h6>
        </div>
        <%}%>
            <div class="col" id="playerRowWrapper">
            </div>
            
        
    </div>
        <script src="/assets/bootstrap/js/bootstrap.min.js"></script>
        <script>
       
        </script>
        <script>
            function isNumeric(str) { // https://stackoverflow.com/questions/175739/built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number
            if (typeof str != "string") return false // we only process strings!  
            return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
                !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail
}

        const inputSearch = document.querySelector("#inputSearch");
        const formSearch = document.querySelector("#search");
        formSearch.addEventListener("submit",async (e) => {
            e.preventDefault();
            clearInterval(getPlayers);
            let resp;
            //console.log(inputSearch.value.length);
            if(inputSearch.value.length <= 0) {
                getPlayers();
                return;
            }
            if(isNumeric(inputSearch.value) && inputSearch.value.length <= 4) {
                resp = await fetch(`/apps/serverStatus/<%=svInfo.EndPoint%>/activity/${inputSearch.value}`).then(
                            data => data.json());
                            wrapper.innerHTML = "";
                            for (activity of resp.activity) {
                            let time = parseTime(Date.now() - activity.onlineAt);
                            let playerRow = playerRowTemplate(activity.player._id, activity.sv_id, activity.player
                                .name, time);
                            wrapper.innerHTML += playerRow;
                        }
            }
            else {
                resp = await fetch(`/apps/serverStatus/<%=svInfo.EndPoint%>/search/${inputSearch.value}`).then(data =>data.json());
                wrapper.innerHTML = "";
                for (val of resp) {
                    let time = "";
                    let playerRow = playerRowTemplate(val._id, "-", val.name, "-");
                    
                    wrapper.innerHTML += playerRow;
                }
            }
            //console.log(resp);
        });
            let wrapper = document.querySelector("#playerRowWrapper");
            let playerCount = document.querySelector("#playerCount");
            let circ = document.querySelector("#statusCircle");
            let playerRowTemplate = (_id, sv_id, name, time) => {
                    return `<div class="d-flex flex-row justify-content-between py-1" id="PlayerRow" style="border-top-width: 1px;border-top-style: solid;">
                <div class="text-truncate">
                    <span class="pr-2">${sv_id}</span>
                    <span>${name}</span>
                </div>
                <div class="d-inline-flex flex-row">
                    <span class="pr-2 text-nowrap">${time}</span>
                <a class="btn btn-primary" role="button" id="btnUserProfile" href="/apps/serverStatus/players/${_id}/info"><i class="fa fa-user"></i></a>
                    </div>
                </div>`;
                } <%if (svInfo.Flags.tracked) {%>
                    getPlayers();
                    async function getPlayers() {
                        const response = await fetch("/apps/serverStatus/<%=svInfo.EndPoint%>/activity").then(
                            resp => resp
                            .json());

                        if (response.info.Flags.state != "200") {
                            circ.className = "role-circle-fill bg-warning";
                            playerCount.className = "ml-1 text-warning";
                            playerCount.innerHTML = "Connection issues";
                            wrapper.innerHTML = "";
                            return;
                        }
                        circ.className = "role-circle-fill bg-success";
                        playerCount.className = "ml-1 text-success";
                        playerCount.innerHTML = `${response.activity.length}/<%=svInfo.Data.sv_maxclients%>`;
                        //console.log(activities);
                        wrapper.innerHTML = "";
                        for (activity of response.activity) {
                            let time = parseTime(Date.now() - activity.onlineAt);
                            let playerRow = playerRowTemplate(activity.player._id, activity.sv_id, activity.player
                                .name, time);
                            wrapper.innerHTML += playerRow;
                        }
                    }
                    window.setInterval(getPlayers, 10000); 
                    <%} %> 
                    parseTime = (msec) => {
                // Ref: https://stackoverflow.com/questions/1787939/check-time-difference-in-javascript
                var hh = Math.floor(msec / 1000 / 60 / 60);
                msec -= hh * 1000 * 60 * 60;
                var mm = Math.floor(msec / 1000 / 60);
                msec -= mm * 1000 * 60;
                var ss = Math.floor(msec / 1000);
                msec -= ss * 1000;
                if (hh > 0) {
                    return `${hh}h ${mm}m`;
                } else if (mm > 0) {
                    return `${mm}m`;
                }
                return `${ss}s`;
            };
        </script>
        <script>
            
        </script>
</body>

</html>